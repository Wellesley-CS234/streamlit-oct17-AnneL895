# This file was generated by Gemini with this prompt
"""can you create a minimal streamlit app that uses pandas and altair to 
run in this environment (with synthetic data, maybe a comparative timeseries 
of datasets in pandas). """

import streamlit as st
import pandas as pd
import numpy as np
import altair as alt

# --- Configuration ---
st.set_page_config(
    page_title="Comparative Time Series",
    layout="centered",
)

def generate_time_series_data():
    """Generates synthetic time-series data for two comparative metrics."""
    np.random.seed(42)  # For reproducibility
    date_range = pd.date_range(start="2024-01-01", periods=100, freq="D")
    
    # Generate Metric A (Base trend + noise)
    base_a = np.linspace(50, 80, 100)
    noise_a = np.random.normal(0, 5, 100)
    metric_a = base_a + noise_a

    # Generate Metric B (Base trend + different noise/pattern)
    base_b = np.linspace(60, 95, 100)
    # Add a slight periodic component to Metric B
    periodic_b = 5 * np.sin(np.arange(100) / 10)
    noise_b = np.random.normal(0, 4, 100)
    metric_b = base_b + periodic_b + noise_b

    # Create the DataFrame
    df = pd.DataFrame({
        'Date': date_range,
        'Metric A': metric_a.round(2),
        'Metric B': metric_b.round(2)
    })

    return df

# --- Data Generation and Transformation ---
data = generate_time_series_data()

# Transform the DataFrame from wide to long format for Altair plotting
# This makes plotting multiple series much cleaner.
data_long = data.melt(
    'Date',
    var_name='Metric',
    value_name='Value'
)


# --- Streamlit App Layout ---

st.title("Project Data Visualization Demo")
st.markdown("This minimal application demonstrates the use of Streamlit, Pandas, and Altair to visualize comparative time-series data.")

st.header("Comparative Metrics Over Time")

# --- Altair Chart Generation ---

# Create the line chart
chart = alt.Chart(data_long).mark_line().encode(
    # X-axis is the Date
    x=alt.X('Date:T', title='Date'),
    # Y-axis is the Value
    y=alt.Y('Value:Q', title='Value'),
    # Color differentiates the lines based on the 'Metric' column
    color=alt.Color('Metric:N', title='Data Series'),
    # Add tooltips for interactivity
    tooltip=['Date:T', 'Metric:N', 'Value:Q']
).properties(
    title='Time Series Comparison of Metric A and Metric B'
).interactive() # Make the chart interactive (zoom/pan)

# Display the chart in Streamlit
st.altair_chart(chart, use_container_width=True)

st.subheader("Raw Data Preview")
# Display the raw data table
st.dataframe(data)

# Instructions for students
st.sidebar.info(
    "To run this app:\n"
    "1. Activate your virtual environment: `source .cs234st/bin/activate` (or your OS equivalent).\n"
    "2. Run the Streamlit command: `streamlit run app.py`"
)
